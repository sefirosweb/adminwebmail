{% extends 'AdminWebMailBundle::base.html.twig' %}

{% block body %}
    <h1>Domains</h1>
    <div class="row">
        <div class="col-sm-12">
            <div id="toolbar" disabled="disabled">
                <button class="btn btn-success" data-toggle="modal" data-target="#addDomainModal">Add Domain</button>
            </div>
            <table id="table"
                   data-toolbar="#toolbar"
                   data-search="true"
                   data-show-refresh="true"
                   data-show-toggle="true"
                   data-show-columns="true"
                   data-detail-view="true"
                   data-unique-id="id"

                   data-show-export="true"
                   data-export-types="['txt','csv','excel','png','pdf']"
                   data-export-data-type="all"

                   data-minimum-count-columns="1"
                   data-show-pagination-switch="true"
                   data-pagination="true"
                   data-id-field="id"
                   data-page-list="[10, 25, 50, 100, ALL]"
                   data-show-footer="false"
                   data-url="{{ path('get_domains') }}"
            >
            </table>
        </div>
    </div>


    <!--Modals-->

    <!-- Modal Add Domain -->
    <div id="addDomainModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Insert info</h4>
                </div>
                <div class="modal-body">

                    <div class="row">
                        <div class="col-sm-12">
                            <form>
                                <div class="form-group" id="newDomainTextGroup">
                                    <label class="control-label" for="newDomainText">Domain Name</label>

                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="glyphicon glyphicon-tasks"></i></span>
                                        <input id="newDomainText" type="email" class="form-control" placeholder="sefirosweb.es">
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" style="float:left;" id="createDomainBtn">Create Domain</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                </div>
            </div>

        </div>
    </div>


{% endblock %}


{% block javascripts %}
    {{ parent() }}
    <script>
        var $table = $('#table');
        var $users = JSON.parse('{{(users|json_encode|raw)}}');
        var $aliases = JSON.parse('{{(aliases|json_encode|raw)}}');
        var errorGlyphicon = '<span class="glyphicon glyphicon-remove form-control-feedback error-label"></span>';

        window.operateEvents = {
            'click .remove': function (e, value, row, index) {
                $table.bootstrapTable('showLoading');
                $.ajax({
                    type: "DELETE",
                    data: {
                        "id": row.id
                    },
                    url: "{{ path('delete_domains') }}",
                    dataType: "json",
                    success: function (data) {
                        if (data["success"] == "true") {
                            notify("Domain deleted", "warning");
                            $table.bootstrapTable('remove', {
                                field: 'id',
                                values: [row.id]
                            });
                        } else {
                            notify(data["error"], "danger");
                        }
                    },
                    error: function (data) {
                        notify("Error on delete domain", "danger");
                        console.log(data);
                    },
                    complete: function () {
                        $table.bootstrapTable('hideLoading');
                    }
                });
            }
        };

        $(document).ready(function () {
            $table.bootstrapTable({
                columns: [{
                    field: 'id',
                    title: 'ID',
                    sortable: true,
                    align: 'center',
                    visible: false
                }, {
                    field: 'name',
                    title: 'Domain',
                    sortable: true,
                    align: 'center',
                    editable: {
                        type: 'text',
                        title: 'Email Address',
                        validate: function (value) {
                            value = $.trim(value);
                            if (!value) {
                                return 'This field is required';
                            }

                            var dataDomain = $table.bootstrapTable('getData'), index = $(this).parents('tr').data('index');
                            var oldName = dataDomain[index]["name"];

                            $table.bootstrapTable('showLoading');
                            $.ajax({
                                type: "PUT",
                                data: {
                                    "id": dataDomain[index]["id"],
                                    "name": value
                                },
                                url: "{{ path('update_domains') }}",
                                dataType: "json",
                                success: function (data) {
                                    if (data["success"] == "true") {
                                        notify("Update successfully", "success");
                                    } else {
                                        notify(data["error"], "danger");
                                        $table.bootstrapTable('updateByUniqueId', {id: dataDomain[index]["id"], row: {name: oldName}});
                                    }
                                },
                                error: function () {
                                    notify("Error on update domain", "danger");
                                    $table.bootstrapTable('updateByUniqueId', {id: dataDomain[index]["id"], row: {name: oldName}});
                                },
                                complete: function () {
                                    $table.bootstrapTable('hideLoading');
                                }
                            });
                            return '';
                        }
                    }
                }, {
                    field: 'operate',
                    title: 'Item Operate',
                    align: 'center',
                    formatter: function (value, row, index) {
                        return ['<a class="remove" href="#" title="Remove"><i class="glyphicon glyphicon-remove"></i></a>']
                    },
                    events: operateEvents

                }],
                onExpandRow: function (index, row, $subTable) {
                    subTableBuild($subTable.html('<table></table>').find('table'), row['id']);
                }
            });

            function subTableBuild($subTable, $idDomain) {
                var row, columns = [], data = [];
                columns.push({
                    field: 'select',
                    title: 'Search Aliases or Users'
                });

                data.push({
                    select: 'Users'
                });
                data.push({
                    select: 'Aliases'
                });

                //row = {};
                //row['select'] = 'Aliases';
                //data.push(row);

                $subTable.bootstrapTable({
                    columns: columns,
                    data: data,
                    detailView: true,
                    onExpandRow: function (index, row, $subTable) {
                        if (row['select'] == 'Aliases') {
                            subTableAliases($subTable.html('<table></table>').find('table'), $idDomain);
                        } else if (row['select'] == 'Users') {
                            subTableUsers($subTable.html('<table></table>').find('table'), $idDomain);
                        }
                    }
                });
            }

            function subTableUsers($subTable, $idDomain) {
                var columns = [], data = [];
                columns.push({
                    field: 'email',
                    title: 'Email',
                    sortable: true
                });

                if (typeof $users[$idDomain] !== 'undefined') {
                    for (var x = 0, xlen = $users[$idDomain].length; x < xlen; x++) {
                        data.push({
                            email: $users[$idDomain][x]['email']
                        });
                    }
                }

                $subTable.bootstrapTable({
                    columns: columns,
                    data: data
                });
            }

            function subTableAliases($subTable, $idDomain) {
                var columns = [], data = [];
                columns.push({
                    field: 'source',
                    title: 'Source',
                    sortable: true
                });
                columns.push({
                    field: 'destination',
                    title: 'Destination',
                    sortable: true
                });

                if (typeof $aliases[$idDomain] !== 'undefined') {
                    for (var x = 0, xlen = $aliases[$idDomain].length; x < xlen; x++) {
                        data.push({
                            source: $aliases[$idDomain][x]['source'],
                            destination: $aliases[$idDomain][x]['destination'],
                        });
                    }
                }

                $subTable.bootstrapTable({
                    columns: columns,
                    data: data
                });
            }

            $('#createDomainBtn').click(function () {
                if (checkDomain()) {
                    $table.bootstrapTable('showLoading');
                    $('#addDomainModal').modal('hide');
                    $.ajax({
                        type: "POST",
                        data: {
                            "domainName": $("#newDomainText").val()
                        },
                        url: "{{ path('add_domains') }}",
                        dataType: "json",
                        success: function (data) {
                            if (data["success"] == "true") {
                                notify("Domain created", "success");
                                $table.bootstrapTable('prepend', data["domain"]);
                            } else {
                                notify(data["error"], "danger");
                            }
                        },
                        error: function (data) {
                            notify("Error on create domain", "danger");
                            console.log(data);
                        },
                        complete: function () {
                            $table.bootstrapTable('hideLoading');
                        }
                    });
                }
            });

            //Check domain empty
            $("#newDomainText")
                    .blur(function () {
                        checkDomain();
                    })
                    .focus(function () {
                        $(this).parent().parent().removeClass("has-error has-success");
                        $("#newDomainText").popover('hide');
                    });

            function checkDomain() {
                $("#newDomainTextGroup").find(".error-label").remove();
                if ($("#newDomainText").val() != "") {
                    $("#newDomainTextGroup").addClass("has-success");
                    return true;
                } else {
                    $("#newDomainTextGroup").addClass("has-error");
                    popoverShow('newDomainText', 'Domain cannot be empty!', 'top', 'danger');
                    $("#newDomainText").after(errorGlyphicon);
                    return false;
                }
            }


            //Clear modal
            $('.modal').on('hidden.bs.modal', function () {
                $(this).find('input').val("");
                $(this).find('.error-label').remove();
                $(this).find('.has-error, .has-success').removeClass("has-error has-success");
                $(this).find('.popover').popover('hide');
            });


        });
    </script>
{% endblock %}

